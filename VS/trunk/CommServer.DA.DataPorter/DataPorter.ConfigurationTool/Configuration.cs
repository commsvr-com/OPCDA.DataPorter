//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated> 
//------------------------------------------------------------------------------
#pragma warning disable 1591

namespace NetworkConfig {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ComunicationNet : DataSet {
        
        private ChannelsDataTable tableChannels;
        
        private InterfacesDataTable tableInterfaces;
        
        private StationDataTable tableStation;
        
        private DataBlocksDataTable tableDataBlocks;
        
        private SegmentsDataTable tableSegments;
        
        private TagsDataTable tableTags;
        
        private GroupsDataTable tableGroups;
        
        private ProtocolDataTable tableProtocol;
        
        private SerialSetingsDataTable tableSerialSetings;
        
        private TagBitDataTable tableTagBit;
        
        private DataRelation relationStationDataBlock;
        
        private DataRelation relationSegmentInterface;
        
        private DataRelation relationStationInterface;
        
        private DataRelation relationDataBlockTags;
        
        private DataRelation relationGroupsDataBlocks;
        
        private DataRelation relationStationGroups;
        
        private DataRelation relationProtocolSerialSetings;
        
        private DataRelation relationChannelsProtocol;
        
        private DataRelation relationProtocolSegments;
        
        private DataRelation relationTagsTagBit;
        
        public ComunicationNet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ComunicationNet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Channels"] != null)) {
                    this.Tables.Add(new ChannelsDataTable(ds.Tables["Channels"]));
                }
                if ((ds.Tables["Interfaces"] != null)) {
                    this.Tables.Add(new InterfacesDataTable(ds.Tables["Interfaces"]));
                }
                if ((ds.Tables["Station"] != null)) {
                    this.Tables.Add(new StationDataTable(ds.Tables["Station"]));
                }
                if ((ds.Tables["DataBlocks"] != null)) {
                    this.Tables.Add(new DataBlocksDataTable(ds.Tables["DataBlocks"]));
                }
                if ((ds.Tables["Segments"] != null)) {
                    this.Tables.Add(new SegmentsDataTable(ds.Tables["Segments"]));
                }
                if ((ds.Tables["Tags"] != null)) {
                    this.Tables.Add(new TagsDataTable(ds.Tables["Tags"]));
                }
                if ((ds.Tables["Groups"] != null)) {
                    this.Tables.Add(new GroupsDataTable(ds.Tables["Groups"]));
                }
                if ((ds.Tables["Protocol"] != null)) {
                    this.Tables.Add(new ProtocolDataTable(ds.Tables["Protocol"]));
                }
                if ((ds.Tables["SerialSetings"] != null)) {
                    this.Tables.Add(new SerialSetingsDataTable(ds.Tables["SerialSetings"]));
                }
                if ((ds.Tables["TagBit"] != null)) {
                    this.Tables.Add(new TagBitDataTable(ds.Tables["TagBit"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ChannelsDataTable Channels {
            get {
                return this.tableChannels;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InterfacesDataTable Interfaces {
            get {
                return this.tableInterfaces;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StationDataTable Station {
            get {
                return this.tableStation;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataBlocksDataTable DataBlocks {
            get {
                return this.tableDataBlocks;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SegmentsDataTable Segments {
            get {
                return this.tableSegments;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TagsDataTable Tags {
            get {
                return this.tableTags;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GroupsDataTable Groups {
            get {
                return this.tableGroups;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProtocolDataTable Protocol {
            get {
                return this.tableProtocol;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SerialSetingsDataTable SerialSetings {
            get {
                return this.tableSerialSetings;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TagBitDataTable TagBit {
            get {
                return this.tableTagBit;
            }
        }
        
        public override DataSet Clone() {
            ComunicationNet cln = ((ComunicationNet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Channels"] != null)) {
                this.Tables.Add(new ChannelsDataTable(ds.Tables["Channels"]));
            }
            if ((ds.Tables["Interfaces"] != null)) {
                this.Tables.Add(new InterfacesDataTable(ds.Tables["Interfaces"]));
            }
            if ((ds.Tables["Station"] != null)) {
                this.Tables.Add(new StationDataTable(ds.Tables["Station"]));
            }
            if ((ds.Tables["DataBlocks"] != null)) {
                this.Tables.Add(new DataBlocksDataTable(ds.Tables["DataBlocks"]));
            }
            if ((ds.Tables["Segments"] != null)) {
                this.Tables.Add(new SegmentsDataTable(ds.Tables["Segments"]));
            }
            if ((ds.Tables["Tags"] != null)) {
                this.Tables.Add(new TagsDataTable(ds.Tables["Tags"]));
            }
            if ((ds.Tables["Groups"] != null)) {
                this.Tables.Add(new GroupsDataTable(ds.Tables["Groups"]));
            }
            if ((ds.Tables["Protocol"] != null)) {
                this.Tables.Add(new ProtocolDataTable(ds.Tables["Protocol"]));
            }
            if ((ds.Tables["SerialSetings"] != null)) {
                this.Tables.Add(new SerialSetingsDataTable(ds.Tables["SerialSetings"]));
            }
            if ((ds.Tables["TagBit"] != null)) {
                this.Tables.Add(new TagBitDataTable(ds.Tables["TagBit"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableChannels = ((ChannelsDataTable)(this.Tables["Channels"]));
            if ((this.tableChannels != null)) {
                this.tableChannels.InitVars();
            }
            this.tableInterfaces = ((InterfacesDataTable)(this.Tables["Interfaces"]));
            if ((this.tableInterfaces != null)) {
                this.tableInterfaces.InitVars();
            }
            this.tableStation = ((StationDataTable)(this.Tables["Station"]));
            if ((this.tableStation != null)) {
                this.tableStation.InitVars();
            }
            this.tableDataBlocks = ((DataBlocksDataTable)(this.Tables["DataBlocks"]));
            if ((this.tableDataBlocks != null)) {
                this.tableDataBlocks.InitVars();
            }
            this.tableSegments = ((SegmentsDataTable)(this.Tables["Segments"]));
            if ((this.tableSegments != null)) {
                this.tableSegments.InitVars();
            }
            this.tableTags = ((TagsDataTable)(this.Tables["Tags"]));
            if ((this.tableTags != null)) {
                this.tableTags.InitVars();
            }
            this.tableGroups = ((GroupsDataTable)(this.Tables["Groups"]));
            if ((this.tableGroups != null)) {
                this.tableGroups.InitVars();
            }
            this.tableProtocol = ((ProtocolDataTable)(this.Tables["Protocol"]));
            if ((this.tableProtocol != null)) {
                this.tableProtocol.InitVars();
            }
            this.tableSerialSetings = ((SerialSetingsDataTable)(this.Tables["SerialSetings"]));
            if ((this.tableSerialSetings != null)) {
                this.tableSerialSetings.InitVars();
            }
            this.tableTagBit = ((TagBitDataTable)(this.Tables["TagBit"]));
            if ((this.tableTagBit != null)) {
                this.tableTagBit.InitVars();
            }
            this.relationStationDataBlock = this.Relations["StationDataBlock"];
            this.relationSegmentInterface = this.Relations["SegmentInterface"];
            this.relationStationInterface = this.Relations["StationInterface"];
            this.relationDataBlockTags = this.Relations["DataBlockTags"];
            this.relationGroupsDataBlocks = this.Relations["GroupsDataBlocks"];
            this.relationStationGroups = this.Relations["StationGroups"];
            this.relationProtocolSerialSetings = this.Relations["ProtocolSerialSetings"];
            this.relationChannelsProtocol = this.Relations["ChannelsProtocol"];
            this.relationProtocolSegments = this.Relations["ProtocolSegments"];
            this.relationTagsTagBit = this.Relations["TagsTagBit"];
        }
        
        private void InitClass() {
            this.DataSetName = "ComunicationNet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ComunicationNet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableChannels = new ChannelsDataTable();
            this.Tables.Add(this.tableChannels);
            this.tableInterfaces = new InterfacesDataTable();
            this.Tables.Add(this.tableInterfaces);
            this.tableStation = new StationDataTable();
            this.Tables.Add(this.tableStation);
            this.tableDataBlocks = new DataBlocksDataTable();
            this.Tables.Add(this.tableDataBlocks);
            this.tableSegments = new SegmentsDataTable();
            this.Tables.Add(this.tableSegments);
            this.tableTags = new TagsDataTable();
            this.Tables.Add(this.tableTags);
            this.tableGroups = new GroupsDataTable();
            this.Tables.Add(this.tableGroups);
            this.tableProtocol = new ProtocolDataTable();
            this.Tables.Add(this.tableProtocol);
            this.tableSerialSetings = new SerialSetingsDataTable();
            this.Tables.Add(this.tableSerialSetings);
            this.tableTagBit = new TagBitDataTable();
            this.Tables.Add(this.tableTagBit);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("SegmentInterface", new DataColumn[] {
                        this.tableSegments.SegmentIDColumn,
                        this.tableSegments.ChannelIDColumn}, new DataColumn[] {
                        this.tableInterfaces.SegmentIdColumn,
                        this.tableInterfaces.ChannelIdColumn});
            this.tableInterfaces.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StationInterface", new DataColumn[] {
                        this.tableStation.StationIDColumn}, new DataColumn[] {
                        this.tableInterfaces.StationIdColumn});
            this.tableInterfaces.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StationDataBlock", new DataColumn[] {
                        this.tableStation.StationIDColumn}, new DataColumn[] {
                        this.tableDataBlocks.SatationIDColumn});
            this.tableDataBlocks.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("GroupsDataBlocks", new DataColumn[] {
                        this.tableGroups.StationIDColumn,
                        this.tableGroups.GroupIDColumn}, new DataColumn[] {
                        this.tableDataBlocks.SatationIDColumn,
                        this.tableDataBlocks.GroupIDColumn});
            this.tableDataBlocks.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProtocolSegments", new DataColumn[] {
                        this.tableProtocol.ProtocolIDColumn,
                        this.tableProtocol.ChannelIDColumn}, new DataColumn[] {
                        this.tableSegments.ProtocolIDColumn,
                        this.tableSegments.ChannelIDColumn});
            this.tableSegments.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("DataBlockTags", new DataColumn[] {
                        this.tableDataBlocks.SatationIDColumn,
                        this.tableDataBlocks.AddressColumn,
                        this.tableDataBlocks.DataTypeColumn}, new DataColumn[] {
                        this.tableTags.StationIDColumn,
                        this.tableTags.AddressColumn,
                        this.tableTags.DataTypeColumn});
            this.tableTags.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StationGroups", new DataColumn[] {
                        this.tableStation.StationIDColumn}, new DataColumn[] {
                        this.tableGroups.StationIDColumn});
            this.tableGroups.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ChannelsProtocol", new DataColumn[] {
                        this.tableChannels.ChannelIDColumn}, new DataColumn[] {
                        this.tableProtocol.ChannelIDColumn});
            this.tableProtocol.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProtocolSerialSetings", new DataColumn[] {
                        this.tableProtocol.ProtocolIDColumn}, new DataColumn[] {
                        this.tableSerialSetings.ProtocolIDColumn});
            this.tableSerialSetings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TagsTagBit", new DataColumn[] {
                        this.tableTags.StationIDColumn,
                        this.tableTags.AddressColumn,
                        this.tableTags.TagIDColumn}, new DataColumn[] {
                        this.tableTagBit.StationIDColumn,
                        this.tableTagBit.AddressColumn,
                        this.tableTagBit.TagIDColumn});
            this.tableTagBit.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationStationDataBlock = new DataRelation("StationDataBlock", new DataColumn[] {
                        this.tableStation.StationIDColumn}, new DataColumn[] {
                        this.tableDataBlocks.SatationIDColumn}, false);
            this.Relations.Add(this.relationStationDataBlock);
            this.relationSegmentInterface = new DataRelation("SegmentInterface", new DataColumn[] {
                        this.tableSegments.SegmentIDColumn,
                        this.tableSegments.ChannelIDColumn}, new DataColumn[] {
                        this.tableInterfaces.SegmentIdColumn,
                        this.tableInterfaces.ChannelIdColumn}, false);
            this.Relations.Add(this.relationSegmentInterface);
            this.relationStationInterface = new DataRelation("StationInterface", new DataColumn[] {
                        this.tableStation.StationIDColumn}, new DataColumn[] {
                        this.tableInterfaces.StationIdColumn}, false);
            this.Relations.Add(this.relationStationInterface);
            this.relationDataBlockTags = new DataRelation("DataBlockTags", new DataColumn[] {
                        this.tableDataBlocks.SatationIDColumn,
                        this.tableDataBlocks.AddressColumn,
                        this.tableDataBlocks.DataTypeColumn}, new DataColumn[] {
                        this.tableTags.StationIDColumn,
                        this.tableTags.AddressColumn,
                        this.tableTags.DataTypeColumn}, false);
            this.Relations.Add(this.relationDataBlockTags);
            this.relationGroupsDataBlocks = new DataRelation("GroupsDataBlocks", new DataColumn[] {
                        this.tableGroups.StationIDColumn,
                        this.tableGroups.GroupIDColumn}, new DataColumn[] {
                        this.tableDataBlocks.SatationIDColumn,
                        this.tableDataBlocks.GroupIDColumn}, false);
            this.Relations.Add(this.relationGroupsDataBlocks);
            this.relationStationGroups = new DataRelation("StationGroups", new DataColumn[] {
                        this.tableStation.StationIDColumn}, new DataColumn[] {
                        this.tableGroups.StationIDColumn}, false);
            this.Relations.Add(this.relationStationGroups);
            this.relationProtocolSerialSetings = new DataRelation("ProtocolSerialSetings", new DataColumn[] {
                        this.tableProtocol.ProtocolIDColumn}, new DataColumn[] {
                        this.tableSerialSetings.ProtocolIDColumn}, false);
            this.Relations.Add(this.relationProtocolSerialSetings);
            this.relationChannelsProtocol = new DataRelation("ChannelsProtocol", new DataColumn[] {
                        this.tableChannels.ChannelIDColumn}, new DataColumn[] {
                        this.tableProtocol.ChannelIDColumn}, false);
            this.Relations.Add(this.relationChannelsProtocol);
            this.relationProtocolSegments = new DataRelation("ProtocolSegments", new DataColumn[] {
                        this.tableProtocol.ProtocolIDColumn,
                        this.tableProtocol.ChannelIDColumn}, new DataColumn[] {
                        this.tableSegments.ProtocolIDColumn,
                        this.tableSegments.ChannelIDColumn}, false);
            this.Relations.Add(this.relationProtocolSegments);
            this.relationTagsTagBit = new DataRelation("TagsTagBit", new DataColumn[] {
                        this.tableTags.StationIDColumn,
                        this.tableTags.AddressColumn,
                        this.tableTags.TagIDColumn}, new DataColumn[] {
                        this.tableTagBit.StationIDColumn,
                        this.tableTagBit.AddressColumn,
                        this.tableTagBit.TagIDColumn}, false);
            this.Relations.Add(this.relationTagsTagBit);
        }
        
        private bool ShouldSerializeChannels() {
            return false;
        }
        
        private bool ShouldSerializeInterfaces() {
            return false;
        }
        
        private bool ShouldSerializeStation() {
            return false;
        }
        
        private bool ShouldSerializeDataBlocks() {
            return false;
        }
        
        private bool ShouldSerializeSegments() {
            return false;
        }
        
        private bool ShouldSerializeTags() {
            return false;
        }
        
        private bool ShouldSerializeGroups() {
            return false;
        }
        
        private bool ShouldSerializeProtocol() {
            return false;
        }
        
        private bool ShouldSerializeSerialSetings() {
            return false;
        }
        
        private bool ShouldSerializeTagBit() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ChannelsRowChangeEventHandler(object sender, ChannelsRowChangeEvent e);
        
        public delegate void InterfacesRowChangeEventHandler(object sender, InterfacesRowChangeEvent e);
        
        public delegate void StationRowChangeEventHandler(object sender, StationRowChangeEvent e);
        
        public delegate void DataBlocksRowChangeEventHandler(object sender, DataBlocksRowChangeEvent e);
        
        public delegate void SegmentsRowChangeEventHandler(object sender, SegmentsRowChangeEvent e);
        
        public delegate void TagsRowChangeEventHandler(object sender, TagsRowChangeEvent e);
        
        public delegate void GroupsRowChangeEventHandler(object sender, GroupsRowChangeEvent e);
        
        public delegate void ProtocolRowChangeEventHandler(object sender, ProtocolRowChangeEvent e);
        
        public delegate void SerialSetingsRowChangeEventHandler(object sender, SerialSetingsRowChangeEvent e);
        
        public delegate void TagBitRowChangeEventHandler(object sender, TagBitRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ChannelsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnChannelID;
            
            private DataColumn columnName;
            
            internal ChannelsDataTable() : 
                    base("Channels") {
                this.InitClass();
            }
            
            internal ChannelsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ChannelIDColumn {
                get {
                    return this.columnChannelID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public ChannelsRow this[int index] {
                get {
                    return ((ChannelsRow)(this.Rows[index]));
                }
            }
            
            public event ChannelsRowChangeEventHandler ChannelsRowChanged;
            
            public event ChannelsRowChangeEventHandler ChannelsRowChanging;
            
            public event ChannelsRowChangeEventHandler ChannelsRowDeleted;
            
            public event ChannelsRowChangeEventHandler ChannelsRowDeleting;
            
            public void AddChannelsRow(ChannelsRow row) {
                this.Rows.Add(row);
            }
            
            public ChannelsRow AddChannelsRow(System.UInt64 ChannelID, string Name) {
                ChannelsRow rowChannelsRow = ((ChannelsRow)(this.NewRow()));
                rowChannelsRow.ItemArray = new object[] {
                        ChannelID,
                        Name};
                this.Rows.Add(rowChannelsRow);
                return rowChannelsRow;
            }
            
            public ChannelsRow FindByChannelID(System.UInt64 ChannelID) {
                return ((ChannelsRow)(this.Rows.Find(new object[] {
                            ChannelID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ChannelsDataTable cln = ((ChannelsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ChannelsDataTable();
            }
            
            internal void InitVars() {
                this.columnChannelID = this.Columns["ChannelID"];
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnChannelID = new DataColumn("ChannelID", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChannelID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("CahnnelID_MK", new DataColumn[] {
                                this.columnChannelID}, true));
                this.columnChannelID.AllowDBNull = false;
                this.columnChannelID.Unique = true;
            }
            
            public ChannelsRow NewChannelsRow() {
                return ((ChannelsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ChannelsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ChannelsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ChannelsRowChanged != null)) {
                    this.ChannelsRowChanged(this, new ChannelsRowChangeEvent(((ChannelsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ChannelsRowChanging != null)) {
                    this.ChannelsRowChanging(this, new ChannelsRowChangeEvent(((ChannelsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ChannelsRowDeleted != null)) {
                    this.ChannelsRowDeleted(this, new ChannelsRowChangeEvent(((ChannelsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ChannelsRowDeleting != null)) {
                    this.ChannelsRowDeleting(this, new ChannelsRowChangeEvent(((ChannelsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveChannelsRow(ChannelsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ChannelsRow : DataRow {
            
            private ChannelsDataTable tableChannels;
            
            internal ChannelsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableChannels = ((ChannelsDataTable)(this.Table));
            }
            
            public System.UInt64 ChannelID {
                get {
                    return ((System.UInt64)(this[this.tableChannels.ChannelIDColumn]));
                }
                set {
                    this[this.tableChannels.ChannelIDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableChannels.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannels.NameColumn] = value;
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableChannels.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableChannels.NameColumn] = System.Convert.DBNull;
            }
            
            public ProtocolRow[] GetProtocolRows() {
                return ((ProtocolRow[])(this.GetChildRows(this.Table.ChildRelations["ChannelsProtocol"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ChannelsRowChangeEvent : EventArgs {
            
            private ChannelsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ChannelsRowChangeEvent(ChannelsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ChannelsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InterfacesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnSegmentId;
            
            private DataColumn columnChannelId;
            
            private DataColumn columnStationId;
            
            private DataColumn columnAddress;
            
            private DataColumn columnInactTime;
            
            private DataColumn columnInactTimeAFailure;
            
            private DataColumn columnInterfaceNum;
            
            internal InterfacesDataTable() : 
                    base("Interfaces") {
                this.InitClass();
            }
            
            internal InterfacesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn SegmentIdColumn {
                get {
                    return this.columnSegmentId;
                }
            }
            
            internal DataColumn ChannelIdColumn {
                get {
                    return this.columnChannelId;
                }
            }
            
            internal DataColumn StationIdColumn {
                get {
                    return this.columnStationId;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn InactTimeColumn {
                get {
                    return this.columnInactTime;
                }
            }
            
            internal DataColumn InactTimeAFailureColumn {
                get {
                    return this.columnInactTimeAFailure;
                }
            }
            
            internal DataColumn InterfaceNumColumn {
                get {
                    return this.columnInterfaceNum;
                }
            }
            
            public InterfacesRow this[int index] {
                get {
                    return ((InterfacesRow)(this.Rows[index]));
                }
            }
            
            public event InterfacesRowChangeEventHandler InterfacesRowChanged;
            
            public event InterfacesRowChangeEventHandler InterfacesRowChanging;
            
            public event InterfacesRowChangeEventHandler InterfacesRowDeleted;
            
            public event InterfacesRowChangeEventHandler InterfacesRowDeleting;
            
            public void AddInterfacesRow(InterfacesRow row) {
                this.Rows.Add(row);
            }
            
            public InterfacesRow AddInterfacesRow(string Name, System.UInt64 SegmentId, System.UInt64 ChannelId, StationRow parentStationRowByStationInterface, System.UInt64 Address, long InactTime, long InactTimeAFailure, System.UInt64 InterfaceNum) {
                InterfacesRow rowInterfacesRow = ((InterfacesRow)(this.NewRow()));
                rowInterfacesRow.ItemArray = new object[] {
                        Name,
                        SegmentId,
                        ChannelId,
                        parentStationRowByStationInterface[1],
                        Address,
                        InactTime,
                        InactTimeAFailure,
                        InterfaceNum};
                this.Rows.Add(rowInterfacesRow);
                return rowInterfacesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                InterfacesDataTable cln = ((InterfacesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new InterfacesDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnSegmentId = this.Columns["SegmentId"];
                this.columnChannelId = this.Columns["ChannelId"];
                this.columnStationId = this.Columns["StationId"];
                this.columnAddress = this.Columns["Address"];
                this.columnInactTime = this.Columns["InactTime"];
                this.columnInactTimeAFailure = this.Columns["InactTimeAFailure"];
                this.columnInterfaceNum = this.Columns["InterfaceNum"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnSegmentId = new DataColumn("SegmentId", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSegmentId);
                this.columnChannelId = new DataColumn("ChannelId", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChannelId);
                this.columnStationId = new DataColumn("StationId", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStationId);
                this.columnAddress = new DataColumn("Address", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress);
                this.columnInactTime = new DataColumn("InactTime", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInactTime);
                this.columnInactTimeAFailure = new DataColumn("InactTimeAFailure", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInactTimeAFailure);
                this.columnInterfaceNum = new DataColumn("InterfaceNum", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInterfaceNum);
                this.Constraints.Add(new UniqueConstraint("InterfaceMasterKey", new DataColumn[] {
                                this.columnStationId,
                                this.columnInterfaceNum}, false));
                this.columnName.AllowDBNull = false;
                this.columnSegmentId.AllowDBNull = false;
                this.columnChannelId.AllowDBNull = false;
                this.columnStationId.AllowDBNull = false;
                this.columnAddress.AllowDBNull = false;
                this.columnInactTime.AllowDBNull = false;
                this.columnInactTime.DefaultValue = 1000;
                this.columnInactTimeAFailure.AllowDBNull = false;
                this.columnInactTimeAFailure.DefaultValue = 1000;
                this.columnInterfaceNum.AllowDBNull = false;
            }
            
            public InterfacesRow NewInterfacesRow() {
                return ((InterfacesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new InterfacesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(InterfacesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InterfacesRowChanged != null)) {
                    this.InterfacesRowChanged(this, new InterfacesRowChangeEvent(((InterfacesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InterfacesRowChanging != null)) {
                    this.InterfacesRowChanging(this, new InterfacesRowChangeEvent(((InterfacesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InterfacesRowDeleted != null)) {
                    this.InterfacesRowDeleted(this, new InterfacesRowChangeEvent(((InterfacesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InterfacesRowDeleting != null)) {
                    this.InterfacesRowDeleting(this, new InterfacesRowChangeEvent(((InterfacesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveInterfacesRow(InterfacesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InterfacesRow : DataRow {
            
            private InterfacesDataTable tableInterfaces;
            
            internal InterfacesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableInterfaces = ((InterfacesDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableInterfaces.NameColumn]));
                }
                set {
                    this[this.tableInterfaces.NameColumn] = value;
                }
            }
            
            public System.UInt64 SegmentId {
                get {
                    return ((System.UInt64)(this[this.tableInterfaces.SegmentIdColumn]));
                }
                set {
                    this[this.tableInterfaces.SegmentIdColumn] = value;
                }
            }
            
            public System.UInt64 ChannelId {
                get {
                    return ((System.UInt64)(this[this.tableInterfaces.ChannelIdColumn]));
                }
                set {
                    this[this.tableInterfaces.ChannelIdColumn] = value;
                }
            }
            
            public System.UInt64 StationId {
                get {
                    return ((System.UInt64)(this[this.tableInterfaces.StationIdColumn]));
                }
                set {
                    this[this.tableInterfaces.StationIdColumn] = value;
                }
            }
            
            public System.UInt64 Address {
                get {
                    return ((System.UInt64)(this[this.tableInterfaces.AddressColumn]));
                }
                set {
                    this[this.tableInterfaces.AddressColumn] = value;
                }
            }
            
            public long InactTime {
                get {
                    return ((long)(this[this.tableInterfaces.InactTimeColumn]));
                }
                set {
                    this[this.tableInterfaces.InactTimeColumn] = value;
                }
            }
            
            public long InactTimeAFailure {
                get {
                    return ((long)(this[this.tableInterfaces.InactTimeAFailureColumn]));
                }
                set {
                    this[this.tableInterfaces.InactTimeAFailureColumn] = value;
                }
            }
            
            public System.UInt64 InterfaceNum {
                get {
                    return ((System.UInt64)(this[this.tableInterfaces.InterfaceNumColumn]));
                }
                set {
                    this[this.tableInterfaces.InterfaceNumColumn] = value;
                }
            }
            
            public SegmentsRow SegmentsRowParent {
                get {
                    return ((SegmentsRow)(this.GetParentRow(this.Table.ParentRelations["SegmentInterface"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SegmentInterface"]);
                }
            }
            
            public StationRow StationRow {
                get {
                    return ((StationRow)(this.GetParentRow(this.Table.ParentRelations["StationInterface"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StationInterface"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InterfacesRowChangeEvent : EventArgs {
            
            private InterfacesRow eventRow;
            
            private DataRowAction eventAction;
            
            public InterfacesRowChangeEvent(InterfacesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public InterfacesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StationDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnStationID;
            
            internal StationDataTable() : 
                    base("Station") {
                this.InitClass();
            }
            
            internal StationDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn StationIDColumn {
                get {
                    return this.columnStationID;
                }
            }
            
            public StationRow this[int index] {
                get {
                    return ((StationRow)(this.Rows[index]));
                }
            }
            
            public event StationRowChangeEventHandler StationRowChanged;
            
            public event StationRowChangeEventHandler StationRowChanging;
            
            public event StationRowChangeEventHandler StationRowDeleted;
            
            public event StationRowChangeEventHandler StationRowDeleting;
            
            public void AddStationRow(StationRow row) {
                this.Rows.Add(row);
            }
            
            public StationRow AddStationRow(string Name, System.UInt64 StationID) {
                StationRow rowStationRow = ((StationRow)(this.NewRow()));
                rowStationRow.ItemArray = new object[] {
                        Name,
                        StationID};
                this.Rows.Add(rowStationRow);
                return rowStationRow;
            }
            
            public StationRow FindByStationID(System.UInt64 StationID) {
                return ((StationRow)(this.Rows.Find(new object[] {
                            StationID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                StationDataTable cln = ((StationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new StationDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnStationID = this.Columns["StationID"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnStationID = new DataColumn("StationID", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStationID);
                this.Constraints.Add(new UniqueConstraint("StationID_MK", new DataColumn[] {
                                this.columnStationID}, true));
                this.columnName.AllowDBNull = false;
                this.columnStationID.AllowDBNull = false;
                this.columnStationID.Unique = true;
            }
            
            public StationRow NewStationRow() {
                return ((StationRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new StationRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(StationRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StationRowChanged != null)) {
                    this.StationRowChanged(this, new StationRowChangeEvent(((StationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StationRowChanging != null)) {
                    this.StationRowChanging(this, new StationRowChangeEvent(((StationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StationRowDeleted != null)) {
                    this.StationRowDeleted(this, new StationRowChangeEvent(((StationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StationRowDeleting != null)) {
                    this.StationRowDeleting(this, new StationRowChangeEvent(((StationRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStationRow(StationRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StationRow : DataRow {
            
            private StationDataTable tableStation;
            
            internal StationRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableStation = ((StationDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableStation.NameColumn]));
                }
                set {
                    this[this.tableStation.NameColumn] = value;
                }
            }
            
            public System.UInt64 StationID {
                get {
                    return ((System.UInt64)(this[this.tableStation.StationIDColumn]));
                }
                set {
                    this[this.tableStation.StationIDColumn] = value;
                }
            }
            
            public DataBlocksRow[] GetDataBlocksRows() {
                return ((DataBlocksRow[])(this.GetChildRows(this.Table.ChildRelations["StationDataBlock"])));
            }
            
            public InterfacesRow[] GetInterfacesRows() {
                return ((InterfacesRow[])(this.GetChildRows(this.Table.ChildRelations["StationInterface"])));
            }
            
            public GroupsRow[] GetGroupsRows() {
                return ((GroupsRow[])(this.GetChildRows(this.Table.ChildRelations["StationGroups"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StationRowChangeEvent : EventArgs {
            
            private StationRow eventRow;
            
            private DataRowAction eventAction;
            
            public StationRowChangeEvent(StationRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DataBlocksDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnSatationID;
            
            private DataColumn columnAddress;
            
            private DataColumn columnGroupID;
            
            private DataColumn columnDataType;
            
            internal DataBlocksDataTable() : 
                    base("DataBlocks") {
                this.InitClass();
            }
            
            internal DataBlocksDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn SatationIDColumn {
                get {
                    return this.columnSatationID;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            internal DataColumn DataTypeColumn {
                get {
                    return this.columnDataType;
                }
            }
            
            public DataBlocksRow this[int index] {
                get {
                    return ((DataBlocksRow)(this.Rows[index]));
                }
            }
            
            public event DataBlocksRowChangeEventHandler DataBlocksRowChanged;
            
            public event DataBlocksRowChangeEventHandler DataBlocksRowChanging;
            
            public event DataBlocksRowChangeEventHandler DataBlocksRowDeleted;
            
            public event DataBlocksRowChangeEventHandler DataBlocksRowDeleting;
            
            public void AddDataBlocksRow(DataBlocksRow row) {
                this.Rows.Add(row);
            }
            
            public DataBlocksRow AddDataBlocksRow(string Name, StationRow parentStationRowByStationDataBlock, System.UInt64 Address, System.UInt64 GroupID, System.UInt64 DataType) {
                DataBlocksRow rowDataBlocksRow = ((DataBlocksRow)(this.NewRow()));
                rowDataBlocksRow.ItemArray = new object[] {
                        Name,
                        parentStationRowByStationDataBlock[1],
                        Address,
                        GroupID,
                        DataType};
                this.Rows.Add(rowDataBlocksRow);
                return rowDataBlocksRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DataBlocksDataTable cln = ((DataBlocksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DataBlocksDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnSatationID = this.Columns["SatationID"];
                this.columnAddress = this.Columns["Address"];
                this.columnGroupID = this.Columns["GroupID"];
                this.columnDataType = this.Columns["DataType"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnSatationID = new DataColumn("SatationID", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSatationID);
                this.columnAddress = new DataColumn("Address", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress);
                this.columnGroupID = new DataColumn("GroupID", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGroupID);
                this.columnDataType = new DataColumn("DataType", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDataType);
                this.Constraints.Add(new UniqueConstraint("DataBlockMK", new DataColumn[] {
                                this.columnSatationID,
                                this.columnAddress,
                                this.columnDataType}, false));
                this.Constraints.Add(new UniqueConstraint("DataBlokNameKey", new DataColumn[] {
                                this.columnName}, false));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnSatationID.AllowDBNull = false;
                this.columnAddress.AllowDBNull = false;
                this.columnGroupID.AllowDBNull = false;
                this.columnDataType.AllowDBNull = false;
            }
            
            public DataBlocksRow NewDataBlocksRow() {
                return ((DataBlocksRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DataBlocksRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DataBlocksRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataBlocksRowChanged != null)) {
                    this.DataBlocksRowChanged(this, new DataBlocksRowChangeEvent(((DataBlocksRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataBlocksRowChanging != null)) {
                    this.DataBlocksRowChanging(this, new DataBlocksRowChangeEvent(((DataBlocksRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataBlocksRowDeleted != null)) {
                    this.DataBlocksRowDeleted(this, new DataBlocksRowChangeEvent(((DataBlocksRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataBlocksRowDeleting != null)) {
                    this.DataBlocksRowDeleting(this, new DataBlocksRowChangeEvent(((DataBlocksRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDataBlocksRow(DataBlocksRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DataBlocksRow : DataRow {
            
            private DataBlocksDataTable tableDataBlocks;
            
            internal DataBlocksRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataBlocks = ((DataBlocksDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableDataBlocks.NameColumn]));
                }
                set {
                    this[this.tableDataBlocks.NameColumn] = value;
                }
            }
            
            public System.UInt64 SatationID {
                get {
                    return ((System.UInt64)(this[this.tableDataBlocks.SatationIDColumn]));
                }
                set {
                    this[this.tableDataBlocks.SatationIDColumn] = value;
                }
            }
            
            public System.UInt64 Address {
                get {
                    return ((System.UInt64)(this[this.tableDataBlocks.AddressColumn]));
                }
                set {
                    this[this.tableDataBlocks.AddressColumn] = value;
                }
            }
            
            public System.UInt64 GroupID {
                get {
                    return ((System.UInt64)(this[this.tableDataBlocks.GroupIDColumn]));
                }
                set {
                    this[this.tableDataBlocks.GroupIDColumn] = value;
                }
            }
            
            public System.UInt64 DataType {
                get {
                    return ((System.UInt64)(this[this.tableDataBlocks.DataTypeColumn]));
                }
                set {
                    this[this.tableDataBlocks.DataTypeColumn] = value;
                }
            }
            
            public StationRow StationRow {
                get {
                    return ((StationRow)(this.GetParentRow(this.Table.ParentRelations["StationDataBlock"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StationDataBlock"]);
                }
            }
            
            public GroupsRow GroupsRowParent {
                get {
                    return ((GroupsRow)(this.GetParentRow(this.Table.ParentRelations["GroupsDataBlocks"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["GroupsDataBlocks"]);
                }
            }
            
            public TagsRow[] GetTagsRows() {
                return ((TagsRow[])(this.GetChildRows(this.Table.ChildRelations["DataBlockTags"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DataBlocksRowChangeEvent : EventArgs {
            
            private DataBlocksRow eventRow;
            
            private DataRowAction eventAction;
            
            public DataBlocksRowChangeEvent(DataBlocksRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DataBlocksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SegmentsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnSegmentID;
            
            private DataColumn columnChannelID;
            
            private DataColumn columnProtocolID;
            
            private DataColumn columnAddress;
            
            private DataColumn columnTimeScan;
            
            private DataColumn columnKeepConnect;
            
            private DataColumn columnPickupConn;
            
            private DataColumn columntimeKeepConn;
            
            private DataColumn columnTimeReconnect;
            
            private DataColumn columnTimeIdleKeepConn;
            
            internal SegmentsDataTable() : 
                    base("Segments") {
                this.InitClass();
            }
            
            internal SegmentsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn SegmentIDColumn {
                get {
                    return this.columnSegmentID;
                }
            }
            
            internal DataColumn ChannelIDColumn {
                get {
                    return this.columnChannelID;
                }
            }
            
            internal DataColumn ProtocolIDColumn {
                get {
                    return this.columnProtocolID;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn TimeScanColumn {
                get {
                    return this.columnTimeScan;
                }
            }
            
            internal DataColumn KeepConnectColumn {
                get {
                    return this.columnKeepConnect;
                }
            }
            
            internal DataColumn PickupConnColumn {
                get {
                    return this.columnPickupConn;
                }
            }
            
            internal DataColumn timeKeepConnColumn {
                get {
                    return this.columntimeKeepConn;
                }
            }
            
            internal DataColumn TimeReconnectColumn {
                get {
                    return this.columnTimeReconnect;
                }
            }
            
            internal DataColumn TimeIdleKeepConnColumn {
                get {
                    return this.columnTimeIdleKeepConn;
                }
            }
            
            public SegmentsRow this[int index] {
                get {
                    return ((SegmentsRow)(this.Rows[index]));
                }
            }
            
            public event SegmentsRowChangeEventHandler SegmentsRowChanged;
            
            public event SegmentsRowChangeEventHandler SegmentsRowChanging;
            
            public event SegmentsRowChangeEventHandler SegmentsRowDeleted;
            
            public event SegmentsRowChangeEventHandler SegmentsRowDeleting;
            
            public void AddSegmentsRow(SegmentsRow row) {
                this.Rows.Add(row);
            }
            
            public SegmentsRow AddSegmentsRow(string Name, System.UInt64 SegmentID, System.UInt64 ChannelID, System.UInt64 ProtocolID, string Address, long TimeScan, bool KeepConnect, bool PickupConn, long timeKeepConn, long TimeReconnect, long TimeIdleKeepConn) {
                SegmentsRow rowSegmentsRow = ((SegmentsRow)(this.NewRow()));
                rowSegmentsRow.ItemArray = new object[] {
                        Name,
                        SegmentID,
                        ChannelID,
                        ProtocolID,
                        Address,
                        TimeScan,
                        KeepConnect,
                        PickupConn,
                        timeKeepConn,
                        TimeReconnect,
                        TimeIdleKeepConn};
                this.Rows.Add(rowSegmentsRow);
                return rowSegmentsRow;
            }
            
            public SegmentsRow FindBySegmentID(System.UInt64 SegmentID) {
                return ((SegmentsRow)(this.Rows.Find(new object[] {
                            SegmentID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SegmentsDataTable cln = ((SegmentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SegmentsDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnSegmentID = this.Columns["SegmentID"];
                this.columnChannelID = this.Columns["ChannelID"];
                this.columnProtocolID = this.Columns["ProtocolID"];
                this.columnAddress = this.Columns["Address"];
                this.columnTimeScan = this.Columns["TimeScan"];
                this.columnKeepConnect = this.Columns["KeepConnect"];
                this.columnPickupConn = this.Columns["PickupConn"];
                this.columntimeKeepConn = this.Columns["timeKeepConn"];
                this.columnTimeReconnect = this.Columns["TimeReconnect"];
                this.columnTimeIdleKeepConn = this.Columns["TimeIdleKeepConn"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnSegmentID = new DataColumn("SegmentID", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSegmentID);
                this.columnChannelID = new DataColumn("ChannelID", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChannelID);
                this.columnProtocolID = new DataColumn("ProtocolID", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProtocolID);
                this.columnAddress = new DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress);
                this.columnTimeScan = new DataColumn("TimeScan", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeScan);
                this.columnKeepConnect = new DataColumn("KeepConnect", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnKeepConnect);
                this.columnPickupConn = new DataColumn("PickupConn", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPickupConn);
                this.columntimeKeepConn = new DataColumn("timeKeepConn", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntimeKeepConn);
                this.columnTimeReconnect = new DataColumn("TimeReconnect", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeReconnect);
                this.columnTimeIdleKeepConn = new DataColumn("TimeIdleKeepConn", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeIdleKeepConn);
                this.Constraints.Add(new UniqueConstraint("SegmentID_MK", new DataColumn[] {
                                this.columnSegmentID}, true));
                this.Constraints.Add(new UniqueConstraint("SegmentMK", new DataColumn[] {
                                this.columnSegmentID,
                                this.columnChannelID}, false));
                this.columnName.AllowDBNull = false;
                this.columnSegmentID.AllowDBNull = false;
                this.columnSegmentID.Unique = true;
                this.columnChannelID.AllowDBNull = false;
                this.columnAddress.AllowDBNull = false;
                this.columnTimeScan.AllowDBNull = false;
                this.columnTimeScan.DefaultValue = 60000;
                this.columnKeepConnect.AllowDBNull = false;
                this.columnKeepConnect.DefaultValue = false;
                this.columnPickupConn.AllowDBNull = false;
                this.columnPickupConn.DefaultValue = false;
                this.columntimeKeepConn.AllowDBNull = false;
                this.columntimeKeepConn.DefaultValue = 1000;
                this.columnTimeReconnect.AllowDBNull = false;
                this.columnTimeReconnect.DefaultValue = 60000;
                this.columnTimeIdleKeepConn.AllowDBNull = false;
                this.columnTimeIdleKeepConn.DefaultValue = 100;
            }
            
            public SegmentsRow NewSegmentsRow() {
                return ((SegmentsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SegmentsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SegmentsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SegmentsRowChanged != null)) {
                    this.SegmentsRowChanged(this, new SegmentsRowChangeEvent(((SegmentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SegmentsRowChanging != null)) {
                    this.SegmentsRowChanging(this, new SegmentsRowChangeEvent(((SegmentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SegmentsRowDeleted != null)) {
                    this.SegmentsRowDeleted(this, new SegmentsRowChangeEvent(((SegmentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SegmentsRowDeleting != null)) {
                    this.SegmentsRowDeleting(this, new SegmentsRowChangeEvent(((SegmentsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSegmentsRow(SegmentsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SegmentsRow : DataRow {
            
            private SegmentsDataTable tableSegments;
            
            internal SegmentsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSegments = ((SegmentsDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableSegments.NameColumn]));
                }
                set {
                    this[this.tableSegments.NameColumn] = value;
                }
            }
            
            public System.UInt64 SegmentID {
                get {
                    return ((System.UInt64)(this[this.tableSegments.SegmentIDColumn]));
                }
                set {
                    this[this.tableSegments.SegmentIDColumn] = value;
                }
            }
            
            public System.UInt64 ChannelID {
                get {
                    return ((System.UInt64)(this[this.tableSegments.ChannelIDColumn]));
                }
                set {
                    this[this.tableSegments.ChannelIDColumn] = value;
                }
            }
            
            public System.UInt64 ProtocolID {
                get {
                    try {
                        return ((System.UInt64)(this[this.tableSegments.ProtocolIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegments.ProtocolIDColumn] = value;
                }
            }
            
            public string Address {
                get {
                    return ((string)(this[this.tableSegments.AddressColumn]));
                }
                set {
                    this[this.tableSegments.AddressColumn] = value;
                }
            }
            
            public long TimeScan {
                get {
                    return ((long)(this[this.tableSegments.TimeScanColumn]));
                }
                set {
                    this[this.tableSegments.TimeScanColumn] = value;
                }
            }
            
            public bool KeepConnect {
                get {
                    return ((bool)(this[this.tableSegments.KeepConnectColumn]));
                }
                set {
                    this[this.tableSegments.KeepConnectColumn] = value;
                }
            }
            
            public bool PickupConn {
                get {
                    return ((bool)(this[this.tableSegments.PickupConnColumn]));
                }
                set {
                    this[this.tableSegments.PickupConnColumn] = value;
                }
            }
            
            public long timeKeepConn {
                get {
                    return ((long)(this[this.tableSegments.timeKeepConnColumn]));
                }
                set {
                    this[this.tableSegments.timeKeepConnColumn] = value;
                }
            }
            
            public long TimeReconnect {
                get {
                    return ((long)(this[this.tableSegments.TimeReconnectColumn]));
                }
                set {
                    this[this.tableSegments.TimeReconnectColumn] = value;
                }
            }
            
            public long TimeIdleKeepConn {
                get {
                    return ((long)(this[this.tableSegments.TimeIdleKeepConnColumn]));
                }
                set {
                    this[this.tableSegments.TimeIdleKeepConnColumn] = value;
                }
            }
            
            public ProtocolRow ProtocolRowParent {
                get {
                    return ((ProtocolRow)(this.GetParentRow(this.Table.ParentRelations["ProtocolSegments"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProtocolSegments"]);
                }
            }
            
            public bool IsProtocolIDNull() {
                return this.IsNull(this.tableSegments.ProtocolIDColumn);
            }
            
            public void SetProtocolIDNull() {
                this[this.tableSegments.ProtocolIDColumn] = System.Convert.DBNull;
            }
            
            public InterfacesRow[] GetInterfacesRows() {
                return ((InterfacesRow[])(this.GetChildRows(this.Table.ChildRelations["SegmentInterface"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SegmentsRowChangeEvent : EventArgs {
            
            private SegmentsRow eventRow;
            
            private DataRowAction eventAction;
            
            public SegmentsRowChangeEvent(SegmentsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SegmentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TagsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnStationID;
            
            private DataColumn columnTagID;
            
            private DataColumn columnAddress;
            
            private DataColumn columnWriteable;
            
            private DataColumn columnStateHighTriger;
            
            private DataColumn columnStateLowTrig;
            
            private DataColumn columnAlarm;
            
            private DataColumn columnAlarmMask;
            
            private DataColumn columnStateMask;
            
            private DataColumn columnDataType;
            
            internal TagsDataTable() : 
                    base("Tags") {
                this.InitClass();
            }
            
            internal TagsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn StationIDColumn {
                get {
                    return this.columnStationID;
                }
            }
            
            internal DataColumn TagIDColumn {
                get {
                    return this.columnTagID;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn WriteableColumn {
                get {
                    return this.columnWriteable;
                }
            }
            
            internal DataColumn StateHighTrigerColumn {
                get {
                    return this.columnStateHighTriger;
                }
            }
            
            internal DataColumn StateLowTrigColumn {
                get {
                    return this.columnStateLowTrig;
                }
            }
            
            internal DataColumn AlarmColumn {
                get {
                    return this.columnAlarm;
                }
            }
            
            internal DataColumn AlarmMaskColumn {
                get {
                    return this.columnAlarmMask;
                }
            }
            
            internal DataColumn StateMaskColumn {
                get {
                    return this.columnStateMask;
                }
            }
            
            internal DataColumn DataTypeColumn {
                get {
                    return this.columnDataType;
                }
            }
            
            public TagsRow this[int index] {
                get {
                    return ((TagsRow)(this.Rows[index]));
                }
            }
            
            public event TagsRowChangeEventHandler TagsRowChanged;
            
            public event TagsRowChangeEventHandler TagsRowChanging;
            
            public event TagsRowChangeEventHandler TagsRowDeleted;
            
            public event TagsRowChangeEventHandler TagsRowDeleting;
            
            public void AddTagsRow(TagsRow row) {
                this.Rows.Add(row);
            }
            
            public TagsRow AddTagsRow(string Name, System.UInt64 StationID, System.UInt64 TagID, System.UInt64 Address, bool Writeable, bool StateHighTriger, bool StateLowTrig, bool Alarm, System.UInt64 AlarmMask, System.UInt64 StateMask, System.UInt64 DataType) {
                TagsRow rowTagsRow = ((TagsRow)(this.NewRow()));
                rowTagsRow.ItemArray = new object[] {
                        Name,
                        StationID,
                        TagID,
                        Address,
                        Writeable,
                        StateHighTriger,
                        StateLowTrig,
                        Alarm,
                        AlarmMask,
                        StateMask,
                        DataType};
                this.Rows.Add(rowTagsRow);
                return rowTagsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TagsDataTable cln = ((TagsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TagsDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnStationID = this.Columns["StationID"];
                this.columnTagID = this.Columns["TagID"];
                this.columnAddress = this.Columns["Address"];
                this.columnWriteable = this.Columns["Writeable"];
                this.columnStateHighTriger = this.Columns["StateHighTriger"];
                this.columnStateLowTrig = this.Columns["StateLowTrig"];
                this.columnAlarm = this.Columns["Alarm"];
                this.columnAlarmMask = this.Columns["AlarmMask"];
                this.columnStateMask = this.Columns["StateMask"];
                this.columnDataType = this.Columns["DataType"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnStationID = new DataColumn("StationID", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStationID);
                this.columnTagID = new DataColumn("TagID", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTagID);
                this.columnAddress = new DataColumn("Address", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress);
                this.columnWriteable = new DataColumn("Writeable", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWriteable);
                this.columnStateHighTriger = new DataColumn("StateHighTriger", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateHighTriger);
                this.columnStateLowTrig = new DataColumn("StateLowTrig", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateLowTrig);
                this.columnAlarm = new DataColumn("Alarm", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAlarm);
                this.columnAlarmMask = new DataColumn("AlarmMask", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAlarmMask);
                this.columnStateMask = new DataColumn("StateMask", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateMask);
                this.columnDataType = new DataColumn("DataType", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDataType);
                this.Constraints.Add(new UniqueConstraint("TagIndexKey", new DataColumn[] {
                                this.columnStationID,
                                this.columnAddress,
                                this.columnTagID}, false));
                this.columnName.AllowDBNull = false;
                this.columnStationID.AllowDBNull = false;
                this.columnTagID.AllowDBNull = false;
                this.columnAddress.AllowDBNull = false;
                this.columnWriteable.AllowDBNull = false;
                this.columnWriteable.DefaultValue = false;
                this.columnStateHighTriger.AllowDBNull = false;
                this.columnStateHighTriger.DefaultValue = false;
                this.columnStateLowTrig.AllowDBNull = false;
                this.columnStateLowTrig.DefaultValue = false;
                this.columnAlarm.AllowDBNull = false;
                this.columnAlarm.DefaultValue = false;
                this.columnAlarmMask.AllowDBNull = false;
                this.columnStateMask.AllowDBNull = false;
            }
            
            public TagsRow NewTagsRow() {
                return ((TagsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TagsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TagsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TagsRowChanged != null)) {
                    this.TagsRowChanged(this, new TagsRowChangeEvent(((TagsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TagsRowChanging != null)) {
                    this.TagsRowChanging(this, new TagsRowChangeEvent(((TagsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TagsRowDeleted != null)) {
                    this.TagsRowDeleted(this, new TagsRowChangeEvent(((TagsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TagsRowDeleting != null)) {
                    this.TagsRowDeleting(this, new TagsRowChangeEvent(((TagsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTagsRow(TagsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TagsRow : DataRow {
            
            private TagsDataTable tableTags;
            
            internal TagsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTags = ((TagsDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableTags.NameColumn]));
                }
                set {
                    this[this.tableTags.NameColumn] = value;
                }
            }
            
            public System.UInt64 StationID {
                get {
                    return ((System.UInt64)(this[this.tableTags.StationIDColumn]));
                }
                set {
                    this[this.tableTags.StationIDColumn] = value;
                }
            }
            
            public System.UInt64 TagID {
                get {
                    return ((System.UInt64)(this[this.tableTags.TagIDColumn]));
                }
                set {
                    this[this.tableTags.TagIDColumn] = value;
                }
            }
            
            public System.UInt64 Address {
                get {
                    return ((System.UInt64)(this[this.tableTags.AddressColumn]));
                }
                set {
                    this[this.tableTags.AddressColumn] = value;
                }
            }
            
            public bool Writeable {
                get {
                    return ((bool)(this[this.tableTags.WriteableColumn]));
                }
                set {
                    this[this.tableTags.WriteableColumn] = value;
                }
            }
            
            public bool StateHighTriger {
                get {
                    return ((bool)(this[this.tableTags.StateHighTrigerColumn]));
                }
                set {
                    this[this.tableTags.StateHighTrigerColumn] = value;
                }
            }
            
            public bool StateLowTrig {
                get {
                    return ((bool)(this[this.tableTags.StateLowTrigColumn]));
                }
                set {
                    this[this.tableTags.StateLowTrigColumn] = value;
                }
            }
            
            public bool Alarm {
                get {
                    return ((bool)(this[this.tableTags.AlarmColumn]));
                }
                set {
                    this[this.tableTags.AlarmColumn] = value;
                }
            }
            
            public System.UInt64 AlarmMask {
                get {
                    return ((System.UInt64)(this[this.tableTags.AlarmMaskColumn]));
                }
                set {
                    this[this.tableTags.AlarmMaskColumn] = value;
                }
            }
            
            public System.UInt64 StateMask {
                get {
                    return ((System.UInt64)(this[this.tableTags.StateMaskColumn]));
                }
                set {
                    this[this.tableTags.StateMaskColumn] = value;
                }
            }
            
            public System.UInt64 DataType {
                get {
                    try {
                        return ((System.UInt64)(this[this.tableTags.DataTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTags.DataTypeColumn] = value;
                }
            }
            
            public DataBlocksRow DataBlocksRowParent {
                get {
                    return ((DataBlocksRow)(this.GetParentRow(this.Table.ParentRelations["DataBlockTags"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DataBlockTags"]);
                }
            }
            
            public bool IsDataTypeNull() {
                return this.IsNull(this.tableTags.DataTypeColumn);
            }
            
            public void SetDataTypeNull() {
                this[this.tableTags.DataTypeColumn] = System.Convert.DBNull;
            }
            
            public TagBitRow[] GetTagBitRows() {
                return ((TagBitRow[])(this.GetChildRows(this.Table.ChildRelations["TagsTagBit"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TagsRowChangeEvent : EventArgs {
            
            private TagsRow eventRow;
            
            private DataRowAction eventAction;
            
            public TagsRowChangeEvent(TagsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TagsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GroupsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnStationID;
            
            private DataColumn columnGroupID;
            
            private DataColumn columnTimeScan;
            
            private DataColumn columnTimeOut;
            
            private DataColumn columnTimeScanFast;
            
            private DataColumn columnTimeOutFast;
            
            internal GroupsDataTable() : 
                    base("Groups") {
                this.InitClass();
            }
            
            internal GroupsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn StationIDColumn {
                get {
                    return this.columnStationID;
                }
            }
            
            internal DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            internal DataColumn TimeScanColumn {
                get {
                    return this.columnTimeScan;
                }
            }
            
            internal DataColumn TimeOutColumn {
                get {
                    return this.columnTimeOut;
                }
            }
            
            internal DataColumn TimeScanFastColumn {
                get {
                    return this.columnTimeScanFast;
                }
            }
            
            internal DataColumn TimeOutFastColumn {
                get {
                    return this.columnTimeOutFast;
                }
            }
            
            public GroupsRow this[int index] {
                get {
                    return ((GroupsRow)(this.Rows[index]));
                }
            }
            
            public event GroupsRowChangeEventHandler GroupsRowChanged;
            
            public event GroupsRowChangeEventHandler GroupsRowChanging;
            
            public event GroupsRowChangeEventHandler GroupsRowDeleted;
            
            public event GroupsRowChangeEventHandler GroupsRowDeleting;
            
            public void AddGroupsRow(GroupsRow row) {
                this.Rows.Add(row);
            }
            
            public GroupsRow AddGroupsRow(string Name, StationRow parentStationRowByStationGroups, System.UInt64 GroupID, System.UInt64 TimeScan, System.UInt64 TimeOut, System.UInt64 TimeScanFast, System.UInt64 TimeOutFast) {
                GroupsRow rowGroupsRow = ((GroupsRow)(this.NewRow()));
                rowGroupsRow.ItemArray = new object[] {
                        Name,
                        parentStationRowByStationGroups[1],
                        GroupID,
                        TimeScan,
                        TimeOut,
                        TimeScanFast,
                        TimeOutFast};
                this.Rows.Add(rowGroupsRow);
                return rowGroupsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GroupsDataTable cln = ((GroupsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GroupsDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnStationID = this.Columns["StationID"];
                this.columnGroupID = this.Columns["GroupID"];
                this.columnTimeScan = this.Columns["TimeScan"];
                this.columnTimeOut = this.Columns["TimeOut"];
                this.columnTimeScanFast = this.Columns["TimeScanFast"];
                this.columnTimeOutFast = this.Columns["TimeOutFast"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnStationID = new DataColumn("StationID", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStationID);
                this.columnGroupID = new DataColumn("GroupID", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGroupID);
                this.columnTimeScan = new DataColumn("TimeScan", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeScan);
                this.columnTimeOut = new DataColumn("TimeOut", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeOut);
                this.columnTimeScanFast = new DataColumn("TimeScanFast", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeScanFast);
                this.columnTimeOutFast = new DataColumn("TimeOutFast", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeOutFast);
                this.Constraints.Add(new UniqueConstraint("StatioGropKey", new DataColumn[] {
                                this.columnStationID,
                                this.columnGroupID}, false));
                this.columnName.AllowDBNull = false;
                this.columnStationID.AllowDBNull = false;
                this.columnGroupID.AllowDBNull = false;
                this.columnTimeScan.AllowDBNull = false;
                this.columnTimeOut.AllowDBNull = false;
            }
            
            public GroupsRow NewGroupsRow() {
                return ((GroupsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GroupsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GroupsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GroupsRowChanged != null)) {
                    this.GroupsRowChanged(this, new GroupsRowChangeEvent(((GroupsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GroupsRowChanging != null)) {
                    this.GroupsRowChanging(this, new GroupsRowChangeEvent(((GroupsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GroupsRowDeleted != null)) {
                    this.GroupsRowDeleted(this, new GroupsRowChangeEvent(((GroupsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GroupsRowDeleting != null)) {
                    this.GroupsRowDeleting(this, new GroupsRowChangeEvent(((GroupsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGroupsRow(GroupsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GroupsRow : DataRow {
            
            private GroupsDataTable tableGroups;
            
            internal GroupsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGroups = ((GroupsDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableGroups.NameColumn]));
                }
                set {
                    this[this.tableGroups.NameColumn] = value;
                }
            }
            
            public System.UInt64 StationID {
                get {
                    return ((System.UInt64)(this[this.tableGroups.StationIDColumn]));
                }
                set {
                    this[this.tableGroups.StationIDColumn] = value;
                }
            }
            
            public System.UInt64 GroupID {
                get {
                    return ((System.UInt64)(this[this.tableGroups.GroupIDColumn]));
                }
                set {
                    this[this.tableGroups.GroupIDColumn] = value;
                }
            }
            
            public System.UInt64 TimeScan {
                get {
                    return ((System.UInt64)(this[this.tableGroups.TimeScanColumn]));
                }
                set {
                    this[this.tableGroups.TimeScanColumn] = value;
                }
            }
            
            public System.UInt64 TimeOut {
                get {
                    return ((System.UInt64)(this[this.tableGroups.TimeOutColumn]));
                }
                set {
                    this[this.tableGroups.TimeOutColumn] = value;
                }
            }
            
            public System.UInt64 TimeScanFast {
                get {
                    try {
                        return ((System.UInt64)(this[this.tableGroups.TimeScanFastColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroups.TimeScanFastColumn] = value;
                }
            }
            
            public System.UInt64 TimeOutFast {
                get {
                    try {
                        return ((System.UInt64)(this[this.tableGroups.TimeOutFastColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroups.TimeOutFastColumn] = value;
                }
            }
            
            public StationRow StationRow {
                get {
                    return ((StationRow)(this.GetParentRow(this.Table.ParentRelations["StationGroups"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StationGroups"]);
                }
            }
            
            public bool IsTimeScanFastNull() {
                return this.IsNull(this.tableGroups.TimeScanFastColumn);
            }
            
            public void SetTimeScanFastNull() {
                this[this.tableGroups.TimeScanFastColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimeOutFastNull() {
                return this.IsNull(this.tableGroups.TimeOutFastColumn);
            }
            
            public void SetTimeOutFastNull() {
                this[this.tableGroups.TimeOutFastColumn] = System.Convert.DBNull;
            }
            
            public DataBlocksRow[] GetDataBlocksRows() {
                return ((DataBlocksRow[])(this.GetChildRows(this.Table.ChildRelations["GroupsDataBlocks"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GroupsRowChangeEvent : EventArgs {
            
            private GroupsRow eventRow;
            
            private DataRowAction eventAction;
            
            public GroupsRowChangeEvent(GroupsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GroupsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProtocolDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnProtocolID;
            
            private DataColumn columnName;
            
            private DataColumn columnChannelID;
            
            private DataColumn columnResponseTimeOut;
            
            private DataColumn columnFrameTimeOut;
            
            private DataColumn columnCharacterTimeOut;
            
            private DataColumn columnInterfarameGap;
            
            private DataColumn columnMaxNumberOfRetries;
            
            private DataColumn columnProtocolType;
            
            internal ProtocolDataTable() : 
                    base("Protocol") {
                this.InitClass();
            }
            
            internal ProtocolDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ProtocolIDColumn {
                get {
                    return this.columnProtocolID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ChannelIDColumn {
                get {
                    return this.columnChannelID;
                }
            }
            
            internal DataColumn ResponseTimeOutColumn {
                get {
                    return this.columnResponseTimeOut;
                }
            }
            
            internal DataColumn FrameTimeOutColumn {
                get {
                    return this.columnFrameTimeOut;
                }
            }
            
            internal DataColumn CharacterTimeOutColumn {
                get {
                    return this.columnCharacterTimeOut;
                }
            }
            
            internal DataColumn InterfarameGapColumn {
                get {
                    return this.columnInterfarameGap;
                }
            }
            
            internal DataColumn MaxNumberOfRetriesColumn {
                get {
                    return this.columnMaxNumberOfRetries;
                }
            }
            
            internal DataColumn ProtocolTypeColumn {
                get {
                    return this.columnProtocolType;
                }
            }
            
            public ProtocolRow this[int index] {
                get {
                    return ((ProtocolRow)(this.Rows[index]));
                }
            }
            
            public event ProtocolRowChangeEventHandler ProtocolRowChanged;
            
            public event ProtocolRowChangeEventHandler ProtocolRowChanging;
            
            public event ProtocolRowChangeEventHandler ProtocolRowDeleted;
            
            public event ProtocolRowChangeEventHandler ProtocolRowDeleting;
            
            public void AddProtocolRow(ProtocolRow row) {
                this.Rows.Add(row);
            }
            
            public ProtocolRow AddProtocolRow(System.UInt64 ProtocolID, string Name, ChannelsRow parentChannelsRowByChannelsProtocol, long ResponseTimeOut, System.UInt64 FrameTimeOut, System.UInt64 CharacterTimeOut, System.UInt64 InterfarameGap, long MaxNumberOfRetries, System.SByte ProtocolType) {
                ProtocolRow rowProtocolRow = ((ProtocolRow)(this.NewRow()));
                rowProtocolRow.ItemArray = new object[] {
                        ProtocolID,
                        Name,
                        parentChannelsRowByChannelsProtocol[0],
                        ResponseTimeOut,
                        FrameTimeOut,
                        CharacterTimeOut,
                        InterfarameGap,
                        MaxNumberOfRetries,
                        ProtocolType};
                this.Rows.Add(rowProtocolRow);
                return rowProtocolRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProtocolDataTable cln = ((ProtocolDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProtocolDataTable();
            }
            
            internal void InitVars() {
                this.columnProtocolID = this.Columns["ProtocolID"];
                this.columnName = this.Columns["Name"];
                this.columnChannelID = this.Columns["ChannelID"];
                this.columnResponseTimeOut = this.Columns["ResponseTimeOut"];
                this.columnFrameTimeOut = this.Columns["FrameTimeOut"];
                this.columnCharacterTimeOut = this.Columns["CharacterTimeOut"];
                this.columnInterfarameGap = this.Columns["InterfarameGap"];
                this.columnMaxNumberOfRetries = this.Columns["MaxNumberOfRetries"];
                this.columnProtocolType = this.Columns["ProtocolType"];
            }
            
            private void InitClass() {
                this.columnProtocolID = new DataColumn("ProtocolID", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProtocolID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnChannelID = new DataColumn("ChannelID", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChannelID);
                this.columnResponseTimeOut = new DataColumn("ResponseTimeOut", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnResponseTimeOut);
                this.columnFrameTimeOut = new DataColumn("FrameTimeOut", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFrameTimeOut);
                this.columnCharacterTimeOut = new DataColumn("CharacterTimeOut", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCharacterTimeOut);
                this.columnInterfarameGap = new DataColumn("InterfarameGap", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInterfarameGap);
                this.columnMaxNumberOfRetries = new DataColumn("MaxNumberOfRetries", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxNumberOfRetries);
                this.columnProtocolType = new DataColumn("ProtocolType", typeof(System.SByte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProtocolType);
                this.Constraints.Add(new UniqueConstraint("ProtocolMasterKey", new DataColumn[] {
                                this.columnProtocolID,
                                this.columnChannelID}, false));
                this.Constraints.Add(new UniqueConstraint("ProtocolIDMasterKey", new DataColumn[] {
                                this.columnProtocolID}, false));
                this.Constraints.Add(new UniqueConstraint("ProtocolNameKey", new DataColumn[] {
                                this.columnName}, false));
                this.columnProtocolID.AllowDBNull = false;
                this.columnProtocolID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnChannelID.AllowDBNull = false;
                this.columnResponseTimeOut.AllowDBNull = false;
                this.columnResponseTimeOut.DefaultValue = 500;
                this.columnMaxNumberOfRetries.AllowDBNull = false;
                this.columnMaxNumberOfRetries.DefaultValue = 5;
                this.columnProtocolType.AllowDBNull = false;
            }
            
            public ProtocolRow NewProtocolRow() {
                return ((ProtocolRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProtocolRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProtocolRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProtocolRowChanged != null)) {
                    this.ProtocolRowChanged(this, new ProtocolRowChangeEvent(((ProtocolRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProtocolRowChanging != null)) {
                    this.ProtocolRowChanging(this, new ProtocolRowChangeEvent(((ProtocolRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProtocolRowDeleted != null)) {
                    this.ProtocolRowDeleted(this, new ProtocolRowChangeEvent(((ProtocolRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProtocolRowDeleting != null)) {
                    this.ProtocolRowDeleting(this, new ProtocolRowChangeEvent(((ProtocolRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProtocolRow(ProtocolRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProtocolRow : DataRow {
            
            private ProtocolDataTable tableProtocol;
            
            internal ProtocolRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProtocol = ((ProtocolDataTable)(this.Table));
            }
            
            public System.UInt64 ProtocolID {
                get {
                    return ((System.UInt64)(this[this.tableProtocol.ProtocolIDColumn]));
                }
                set {
                    this[this.tableProtocol.ProtocolIDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableProtocol.NameColumn]));
                }
                set {
                    this[this.tableProtocol.NameColumn] = value;
                }
            }
            
            public System.UInt64 ChannelID {
                get {
                    return ((System.UInt64)(this[this.tableProtocol.ChannelIDColumn]));
                }
                set {
                    this[this.tableProtocol.ChannelIDColumn] = value;
                }
            }
            
            public long ResponseTimeOut {
                get {
                    return ((long)(this[this.tableProtocol.ResponseTimeOutColumn]));
                }
                set {
                    this[this.tableProtocol.ResponseTimeOutColumn] = value;
                }
            }
            
            public System.UInt64 FrameTimeOut {
                get {
                    try {
                        return ((System.UInt64)(this[this.tableProtocol.FrameTimeOutColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProtocol.FrameTimeOutColumn] = value;
                }
            }
            
            public System.UInt64 CharacterTimeOut {
                get {
                    try {
                        return ((System.UInt64)(this[this.tableProtocol.CharacterTimeOutColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProtocol.CharacterTimeOutColumn] = value;
                }
            }
            
            public System.UInt64 InterfarameGap {
                get {
                    try {
                        return ((System.UInt64)(this[this.tableProtocol.InterfarameGapColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProtocol.InterfarameGapColumn] = value;
                }
            }
            
            public long MaxNumberOfRetries {
                get {
                    return ((long)(this[this.tableProtocol.MaxNumberOfRetriesColumn]));
                }
                set {
                    this[this.tableProtocol.MaxNumberOfRetriesColumn] = value;
                }
            }
            
            public System.SByte ProtocolType {
                get {
                    return ((System.SByte)(this[this.tableProtocol.ProtocolTypeColumn]));
                }
                set {
                    this[this.tableProtocol.ProtocolTypeColumn] = value;
                }
            }
            
            public ChannelsRow ChannelsRow {
                get {
                    return ((ChannelsRow)(this.GetParentRow(this.Table.ParentRelations["ChannelsProtocol"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ChannelsProtocol"]);
                }
            }
            
            public bool IsFrameTimeOutNull() {
                return this.IsNull(this.tableProtocol.FrameTimeOutColumn);
            }
            
            public void SetFrameTimeOutNull() {
                this[this.tableProtocol.FrameTimeOutColumn] = System.Convert.DBNull;
            }
            
            public bool IsCharacterTimeOutNull() {
                return this.IsNull(this.tableProtocol.CharacterTimeOutColumn);
            }
            
            public void SetCharacterTimeOutNull() {
                this[this.tableProtocol.CharacterTimeOutColumn] = System.Convert.DBNull;
            }
            
            public bool IsInterfarameGapNull() {
                return this.IsNull(this.tableProtocol.InterfarameGapColumn);
            }
            
            public void SetInterfarameGapNull() {
                this[this.tableProtocol.InterfarameGapColumn] = System.Convert.DBNull;
            }
            
            public SerialSetingsRow[] GetSerialSetingsRows() {
                return ((SerialSetingsRow[])(this.GetChildRows(this.Table.ChildRelations["ProtocolSerialSetings"])));
            }
            
            public SegmentsRow[] GetSegmentsRows() {
                return ((SegmentsRow[])(this.GetChildRows(this.Table.ChildRelations["ProtocolSegments"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProtocolRowChangeEvent : EventArgs {
            
            private ProtocolRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProtocolRowChangeEvent(ProtocolRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProtocolRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SerialSetingsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSerialNum;
            
            private DataColumn columnProtocolID;
            
            private DataColumn columnBaudRate;
            
            private DataColumn columnParity;
            
            private DataColumn columnDataBits;
            
            private DataColumn columnStopBits;
            
            private DataColumn columnTxFlowCTS;
            
            private DataColumn columnTxFlowDSR;
            
            private DataColumn columnTxFlowX;
            
            private DataColumn columnTxWhenRxXoff;
            
            private DataColumn columnRxGateDSR;
            
            private DataColumn columnRxFlowX;
            
            private DataColumn columnUseRTS;
            
            private DataColumn columnUseDTR;
            
            private DataColumn columnXonChar;
            
            private DataColumn columnXoffChar;
            
            private DataColumn columnrxHighWater;
            
            private DataColumn columnrxLowWater;
            
            private DataColumn columnsendTimeoutMultiplier;
            
            private DataColumn columnsendTimeoutConstant;
            
            private DataColumn columnrxQueue;
            
            private DataColumn columntxQueue;
            
            private DataColumn columnautoReopen;
            
            private DataColumn columncheckAllSends;
            
            private DataColumn columnSerialType;
            
            internal SerialSetingsDataTable() : 
                    base("SerialSetings") {
                this.InitClass();
            }
            
            internal SerialSetingsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SerialNumColumn {
                get {
                    return this.columnSerialNum;
                }
            }
            
            internal DataColumn ProtocolIDColumn {
                get {
                    return this.columnProtocolID;
                }
            }
            
            internal DataColumn BaudRateColumn {
                get {
                    return this.columnBaudRate;
                }
            }
            
            internal DataColumn ParityColumn {
                get {
                    return this.columnParity;
                }
            }
            
            internal DataColumn DataBitsColumn {
                get {
                    return this.columnDataBits;
                }
            }
            
            internal DataColumn StopBitsColumn {
                get {
                    return this.columnStopBits;
                }
            }
            
            internal DataColumn TxFlowCTSColumn {
                get {
                    return this.columnTxFlowCTS;
                }
            }
            
            internal DataColumn TxFlowDSRColumn {
                get {
                    return this.columnTxFlowDSR;
                }
            }
            
            internal DataColumn TxFlowXColumn {
                get {
                    return this.columnTxFlowX;
                }
            }
            
            internal DataColumn TxWhenRxXoffColumn {
                get {
                    return this.columnTxWhenRxXoff;
                }
            }
            
            internal DataColumn RxGateDSRColumn {
                get {
                    return this.columnRxGateDSR;
                }
            }
            
            internal DataColumn RxFlowXColumn {
                get {
                    return this.columnRxFlowX;
                }
            }
            
            internal DataColumn UseRTSColumn {
                get {
                    return this.columnUseRTS;
                }
            }
            
            internal DataColumn UseDTRColumn {
                get {
                    return this.columnUseDTR;
                }
            }
            
            internal DataColumn XonCharColumn {
                get {
                    return this.columnXonChar;
                }
            }
            
            internal DataColumn XoffCharColumn {
                get {
                    return this.columnXoffChar;
                }
            }
            
            internal DataColumn rxHighWaterColumn {
                get {
                    return this.columnrxHighWater;
                }
            }
            
            internal DataColumn rxLowWaterColumn {
                get {
                    return this.columnrxLowWater;
                }
            }
            
            internal DataColumn sendTimeoutMultiplierColumn {
                get {
                    return this.columnsendTimeoutMultiplier;
                }
            }
            
            internal DataColumn sendTimeoutConstantColumn {
                get {
                    return this.columnsendTimeoutConstant;
                }
            }
            
            internal DataColumn rxQueueColumn {
                get {
                    return this.columnrxQueue;
                }
            }
            
            internal DataColumn txQueueColumn {
                get {
                    return this.columntxQueue;
                }
            }
            
            internal DataColumn autoReopenColumn {
                get {
                    return this.columnautoReopen;
                }
            }
            
            internal DataColumn checkAllSendsColumn {
                get {
                    return this.columncheckAllSends;
                }
            }
            
            internal DataColumn SerialTypeColumn {
                get {
                    return this.columnSerialType;
                }
            }
            
            public SerialSetingsRow this[int index] {
                get {
                    return ((SerialSetingsRow)(this.Rows[index]));
                }
            }
            
            public event SerialSetingsRowChangeEventHandler SerialSetingsRowChanged;
            
            public event SerialSetingsRowChangeEventHandler SerialSetingsRowChanging;
            
            public event SerialSetingsRowChangeEventHandler SerialSetingsRowDeleted;
            
            public event SerialSetingsRowChangeEventHandler SerialSetingsRowDeleting;
            
            public void AddSerialSetingsRow(SerialSetingsRow row) {
                this.Rows.Add(row);
            }
            
            public SerialSetingsRow AddSerialSetingsRow(
                        System.SByte SerialNum, 
                        ProtocolRow parentProtocolRowByProtocolSerialSetings, 
                        long BaudRate, 
                        System.SByte Parity, 
                        System.SByte DataBits, 
                        System.SByte StopBits, 
                        bool TxFlowCTS, 
                        bool TxFlowDSR, 
                        bool TxFlowX, 
                        bool TxWhenRxXoff, 
                        bool RxGateDSR, 
                        bool RxFlowX, 
                        System.SByte UseRTS, 
                        System.SByte UseDTR, 
                        System.SByte XonChar, 
                        System.SByte XoffChar, 
                        System.UInt64 rxHighWater, 
                        System.UInt64 rxLowWater, 
                        System.UInt64 sendTimeoutMultiplier, 
                        System.UInt64 sendTimeoutConstant, 
                        System.UInt64 rxQueue, 
                        System.UInt64 txQueue, 
                        bool autoReopen, 
                        bool checkAllSends, 
                        long SerialType) {
                SerialSetingsRow rowSerialSetingsRow = ((SerialSetingsRow)(this.NewRow()));
                rowSerialSetingsRow.ItemArray = new object[] {
                        SerialNum,
                        parentProtocolRowByProtocolSerialSetings[0],
                        BaudRate,
                        Parity,
                        DataBits,
                        StopBits,
                        TxFlowCTS,
                        TxFlowDSR,
                        TxFlowX,
                        TxWhenRxXoff,
                        RxGateDSR,
                        RxFlowX,
                        UseRTS,
                        UseDTR,
                        XonChar,
                        XoffChar,
                        rxHighWater,
                        rxLowWater,
                        sendTimeoutMultiplier,
                        sendTimeoutConstant,
                        rxQueue,
                        txQueue,
                        autoReopen,
                        checkAllSends,
                        SerialType};
                this.Rows.Add(rowSerialSetingsRow);
                return rowSerialSetingsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SerialSetingsDataTable cln = ((SerialSetingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SerialSetingsDataTable();
            }
            
            internal void InitVars() {
                this.columnSerialNum = this.Columns["SerialNum"];
                this.columnProtocolID = this.Columns["ProtocolID"];
                this.columnBaudRate = this.Columns["BaudRate"];
                this.columnParity = this.Columns["Parity"];
                this.columnDataBits = this.Columns["DataBits"];
                this.columnStopBits = this.Columns["StopBits"];
                this.columnTxFlowCTS = this.Columns["TxFlowCTS"];
                this.columnTxFlowDSR = this.Columns["TxFlowDSR"];
                this.columnTxFlowX = this.Columns["TxFlowX"];
                this.columnTxWhenRxXoff = this.Columns["TxWhenRxXoff"];
                this.columnRxGateDSR = this.Columns["RxGateDSR"];
                this.columnRxFlowX = this.Columns["RxFlowX"];
                this.columnUseRTS = this.Columns["UseRTS"];
                this.columnUseDTR = this.Columns["UseDTR"];
                this.columnXonChar = this.Columns["XonChar"];
                this.columnXoffChar = this.Columns["XoffChar"];
                this.columnrxHighWater = this.Columns["rxHighWater"];
                this.columnrxLowWater = this.Columns["rxLowWater"];
                this.columnsendTimeoutMultiplier = this.Columns["sendTimeoutMultiplier"];
                this.columnsendTimeoutConstant = this.Columns["sendTimeoutConstant"];
                this.columnrxQueue = this.Columns["rxQueue"];
                this.columntxQueue = this.Columns["txQueue"];
                this.columnautoReopen = this.Columns["autoReopen"];
                this.columncheckAllSends = this.Columns["checkAllSends"];
                this.columnSerialType = this.Columns["SerialType"];
            }
            
            private void InitClass() {
                this.columnSerialNum = new DataColumn("SerialNum", typeof(System.SByte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSerialNum);
                this.columnProtocolID = new DataColumn("ProtocolID", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProtocolID);
                this.columnBaudRate = new DataColumn("BaudRate", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBaudRate);
                this.columnParity = new DataColumn("Parity", typeof(System.SByte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParity);
                this.columnDataBits = new DataColumn("DataBits", typeof(System.SByte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDataBits);
                this.columnStopBits = new DataColumn("StopBits", typeof(System.SByte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStopBits);
                this.columnTxFlowCTS = new DataColumn("TxFlowCTS", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTxFlowCTS);
                this.columnTxFlowDSR = new DataColumn("TxFlowDSR", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTxFlowDSR);
                this.columnTxFlowX = new DataColumn("TxFlowX", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTxFlowX);
                this.columnTxWhenRxXoff = new DataColumn("TxWhenRxXoff", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTxWhenRxXoff);
                this.columnRxGateDSR = new DataColumn("RxGateDSR", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRxGateDSR);
                this.columnRxFlowX = new DataColumn("RxFlowX", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRxFlowX);
                this.columnUseRTS = new DataColumn("UseRTS", typeof(System.SByte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUseRTS);
                this.columnUseDTR = new DataColumn("UseDTR", typeof(System.SByte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUseDTR);
                this.columnXonChar = new DataColumn("XonChar", typeof(System.SByte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnXonChar);
                this.columnXoffChar = new DataColumn("XoffChar", typeof(System.SByte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnXoffChar);
                this.columnrxHighWater = new DataColumn("rxHighWater", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrxHighWater);
                this.columnrxLowWater = new DataColumn("rxLowWater", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrxLowWater);
                this.columnsendTimeoutMultiplier = new DataColumn("sendTimeoutMultiplier", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsendTimeoutMultiplier);
                this.columnsendTimeoutConstant = new DataColumn("sendTimeoutConstant", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsendTimeoutConstant);
                this.columnrxQueue = new DataColumn("rxQueue", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrxQueue);
                this.columntxQueue = new DataColumn("txQueue", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxQueue);
                this.columnautoReopen = new DataColumn("autoReopen", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnautoReopen);
                this.columncheckAllSends = new DataColumn("checkAllSends", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncheckAllSends);
                this.columnSerialType = new DataColumn("SerialType", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSerialType);
                this.Constraints.Add(new UniqueConstraint("SerialSetingComNumKey", new DataColumn[] {
                                this.columnSerialNum}, false));
                this.Constraints.Add(new UniqueConstraint("SerialSetingsProtocolKey", new DataColumn[] {
                                this.columnProtocolID}, false));
                this.columnSerialNum.AllowDBNull = false;
                this.columnSerialNum.Unique = true;
                this.columnProtocolID.AllowDBNull = false;
                this.columnProtocolID.Unique = true;
                this.columnBaudRate.AllowDBNull = false;
                this.columnParity.AllowDBNull = false;
                this.columnDataBits.AllowDBNull = false;
                this.columnStopBits.AllowDBNull = false;
                this.columnSerialType.DefaultValue = 0;
            }
            
            public SerialSetingsRow NewSerialSetingsRow() {
                return ((SerialSetingsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SerialSetingsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SerialSetingsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SerialSetingsRowChanged != null)) {
                    this.SerialSetingsRowChanged(this, new SerialSetingsRowChangeEvent(((SerialSetingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SerialSetingsRowChanging != null)) {
                    this.SerialSetingsRowChanging(this, new SerialSetingsRowChangeEvent(((SerialSetingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SerialSetingsRowDeleted != null)) {
                    this.SerialSetingsRowDeleted(this, new SerialSetingsRowChangeEvent(((SerialSetingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SerialSetingsRowDeleting != null)) {
                    this.SerialSetingsRowDeleting(this, new SerialSetingsRowChangeEvent(((SerialSetingsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSerialSetingsRow(SerialSetingsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SerialSetingsRow : DataRow {
            
            private SerialSetingsDataTable tableSerialSetings;
            
            internal SerialSetingsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSerialSetings = ((SerialSetingsDataTable)(this.Table));
            }
            
            public System.SByte SerialNum {
                get {
                    return ((System.SByte)(this[this.tableSerialSetings.SerialNumColumn]));
                }
                set {
                    this[this.tableSerialSetings.SerialNumColumn] = value;
                }
            }
            
            public System.UInt64 ProtocolID {
                get {
                    return ((System.UInt64)(this[this.tableSerialSetings.ProtocolIDColumn]));
                }
                set {
                    this[this.tableSerialSetings.ProtocolIDColumn] = value;
                }
            }
            
            public long BaudRate {
                get {
                    return ((long)(this[this.tableSerialSetings.BaudRateColumn]));
                }
                set {
                    this[this.tableSerialSetings.BaudRateColumn] = value;
                }
            }
            
            public System.SByte Parity {
                get {
                    return ((System.SByte)(this[this.tableSerialSetings.ParityColumn]));
                }
                set {
                    this[this.tableSerialSetings.ParityColumn] = value;
                }
            }
            
            public System.SByte DataBits {
                get {
                    return ((System.SByte)(this[this.tableSerialSetings.DataBitsColumn]));
                }
                set {
                    this[this.tableSerialSetings.DataBitsColumn] = value;
                }
            }
            
            public System.SByte StopBits {
                get {
                    return ((System.SByte)(this[this.tableSerialSetings.StopBitsColumn]));
                }
                set {
                    this[this.tableSerialSetings.StopBitsColumn] = value;
                }
            }
            
            public bool TxFlowCTS {
                get {
                    try {
                        return ((bool)(this[this.tableSerialSetings.TxFlowCTSColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.TxFlowCTSColumn] = value;
                }
            }
            
            public bool TxFlowDSR {
                get {
                    try {
                        return ((bool)(this[this.tableSerialSetings.TxFlowDSRColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.TxFlowDSRColumn] = value;
                }
            }
            
            public bool TxFlowX {
                get {
                    try {
                        return ((bool)(this[this.tableSerialSetings.TxFlowXColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.TxFlowXColumn] = value;
                }
            }
            
            public bool TxWhenRxXoff {
                get {
                    try {
                        return ((bool)(this[this.tableSerialSetings.TxWhenRxXoffColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.TxWhenRxXoffColumn] = value;
                }
            }
            
            public bool RxGateDSR {
                get {
                    try {
                        return ((bool)(this[this.tableSerialSetings.RxGateDSRColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.RxGateDSRColumn] = value;
                }
            }
            
            public bool RxFlowX {
                get {
                    try {
                        return ((bool)(this[this.tableSerialSetings.RxFlowXColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.RxFlowXColumn] = value;
                }
            }
            
            public System.SByte UseRTS {
                get {
                    try {
                        return ((System.SByte)(this[this.tableSerialSetings.UseRTSColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.UseRTSColumn] = value;
                }
            }
            
            public System.SByte UseDTR {
                get {
                    try {
                        return ((System.SByte)(this[this.tableSerialSetings.UseDTRColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.UseDTRColumn] = value;
                }
            }
            
            public System.SByte XonChar {
                get {
                    try {
                        return ((System.SByte)(this[this.tableSerialSetings.XonCharColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.XonCharColumn] = value;
                }
            }
            
            public System.SByte XoffChar {
                get {
                    try {
                        return ((System.SByte)(this[this.tableSerialSetings.XoffCharColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.XoffCharColumn] = value;
                }
            }
            
            public System.UInt64 rxHighWater {
                get {
                    try {
                        return ((System.UInt64)(this[this.tableSerialSetings.rxHighWaterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.rxHighWaterColumn] = value;
                }
            }
            
            public System.UInt64 rxLowWater {
                get {
                    try {
                        return ((System.UInt64)(this[this.tableSerialSetings.rxLowWaterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.rxLowWaterColumn] = value;
                }
            }
            
            public System.UInt64 sendTimeoutMultiplier {
                get {
                    try {
                        return ((System.UInt64)(this[this.tableSerialSetings.sendTimeoutMultiplierColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.sendTimeoutMultiplierColumn] = value;
                }
            }
            
            public System.UInt64 sendTimeoutConstant {
                get {
                    try {
                        return ((System.UInt64)(this[this.tableSerialSetings.sendTimeoutConstantColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.sendTimeoutConstantColumn] = value;
                }
            }
            
            public System.UInt64 rxQueue {
                get {
                    try {
                        return ((System.UInt64)(this[this.tableSerialSetings.rxQueueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.rxQueueColumn] = value;
                }
            }
            
            public System.UInt64 txQueue {
                get {
                    try {
                        return ((System.UInt64)(this[this.tableSerialSetings.txQueueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.txQueueColumn] = value;
                }
            }
            
            public bool autoReopen {
                get {
                    try {
                        return ((bool)(this[this.tableSerialSetings.autoReopenColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.autoReopenColumn] = value;
                }
            }
            
            public bool checkAllSends {
                get {
                    try {
                        return ((bool)(this[this.tableSerialSetings.checkAllSendsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.checkAllSendsColumn] = value;
                }
            }
            
            public long SerialType {
                get {
                    try {
                        return ((long)(this[this.tableSerialSetings.SerialTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSerialSetings.SerialTypeColumn] = value;
                }
            }
            
            public ProtocolRow ProtocolRow {
                get {
                    return ((ProtocolRow)(this.GetParentRow(this.Table.ParentRelations["ProtocolSerialSetings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProtocolSerialSetings"]);
                }
            }
            
            public bool IsTxFlowCTSNull() {
                return this.IsNull(this.tableSerialSetings.TxFlowCTSColumn);
            }
            
            public void SetTxFlowCTSNull() {
                this[this.tableSerialSetings.TxFlowCTSColumn] = System.Convert.DBNull;
            }
            
            public bool IsTxFlowDSRNull() {
                return this.IsNull(this.tableSerialSetings.TxFlowDSRColumn);
            }
            
            public void SetTxFlowDSRNull() {
                this[this.tableSerialSetings.TxFlowDSRColumn] = System.Convert.DBNull;
            }
            
            public bool IsTxFlowXNull() {
                return this.IsNull(this.tableSerialSetings.TxFlowXColumn);
            }
            
            public void SetTxFlowXNull() {
                this[this.tableSerialSetings.TxFlowXColumn] = System.Convert.DBNull;
            }
            
            public bool IsTxWhenRxXoffNull() {
                return this.IsNull(this.tableSerialSetings.TxWhenRxXoffColumn);
            }
            
            public void SetTxWhenRxXoffNull() {
                this[this.tableSerialSetings.TxWhenRxXoffColumn] = System.Convert.DBNull;
            }
            
            public bool IsRxGateDSRNull() {
                return this.IsNull(this.tableSerialSetings.RxGateDSRColumn);
            }
            
            public void SetRxGateDSRNull() {
                this[this.tableSerialSetings.RxGateDSRColumn] = System.Convert.DBNull;
            }
            
            public bool IsRxFlowXNull() {
                return this.IsNull(this.tableSerialSetings.RxFlowXColumn);
            }
            
            public void SetRxFlowXNull() {
                this[this.tableSerialSetings.RxFlowXColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseRTSNull() {
                return this.IsNull(this.tableSerialSetings.UseRTSColumn);
            }
            
            public void SetUseRTSNull() {
                this[this.tableSerialSetings.UseRTSColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseDTRNull() {
                return this.IsNull(this.tableSerialSetings.UseDTRColumn);
            }
            
            public void SetUseDTRNull() {
                this[this.tableSerialSetings.UseDTRColumn] = System.Convert.DBNull;
            }
            
            public bool IsXonCharNull() {
                return this.IsNull(this.tableSerialSetings.XonCharColumn);
            }
            
            public void SetXonCharNull() {
                this[this.tableSerialSetings.XonCharColumn] = System.Convert.DBNull;
            }
            
            public bool IsXoffCharNull() {
                return this.IsNull(this.tableSerialSetings.XoffCharColumn);
            }
            
            public void SetXoffCharNull() {
                this[this.tableSerialSetings.XoffCharColumn] = System.Convert.DBNull;
            }
            
            public bool IsrxHighWaterNull() {
                return this.IsNull(this.tableSerialSetings.rxHighWaterColumn);
            }
            
            public void SetrxHighWaterNull() {
                this[this.tableSerialSetings.rxHighWaterColumn] = System.Convert.DBNull;
            }
            
            public bool IsrxLowWaterNull() {
                return this.IsNull(this.tableSerialSetings.rxLowWaterColumn);
            }
            
            public void SetrxLowWaterNull() {
                this[this.tableSerialSetings.rxLowWaterColumn] = System.Convert.DBNull;
            }
            
            public bool IssendTimeoutMultiplierNull() {
                return this.IsNull(this.tableSerialSetings.sendTimeoutMultiplierColumn);
            }
            
            public void SetsendTimeoutMultiplierNull() {
                this[this.tableSerialSetings.sendTimeoutMultiplierColumn] = System.Convert.DBNull;
            }
            
            public bool IssendTimeoutConstantNull() {
                return this.IsNull(this.tableSerialSetings.sendTimeoutConstantColumn);
            }
            
            public void SetsendTimeoutConstantNull() {
                this[this.tableSerialSetings.sendTimeoutConstantColumn] = System.Convert.DBNull;
            }
            
            public bool IsrxQueueNull() {
                return this.IsNull(this.tableSerialSetings.rxQueueColumn);
            }
            
            public void SetrxQueueNull() {
                this[this.tableSerialSetings.rxQueueColumn] = System.Convert.DBNull;
            }
            
            public bool IstxQueueNull() {
                return this.IsNull(this.tableSerialSetings.txQueueColumn);
            }
            
            public void SettxQueueNull() {
                this[this.tableSerialSetings.txQueueColumn] = System.Convert.DBNull;
            }
            
            public bool IsautoReopenNull() {
                return this.IsNull(this.tableSerialSetings.autoReopenColumn);
            }
            
            public void SetautoReopenNull() {
                this[this.tableSerialSetings.autoReopenColumn] = System.Convert.DBNull;
            }
            
            public bool IscheckAllSendsNull() {
                return this.IsNull(this.tableSerialSetings.checkAllSendsColumn);
            }
            
            public void SetcheckAllSendsNull() {
                this[this.tableSerialSetings.checkAllSendsColumn] = System.Convert.DBNull;
            }
            
            public bool IsSerialTypeNull() {
                return this.IsNull(this.tableSerialSetings.SerialTypeColumn);
            }
            
            public void SetSerialTypeNull() {
                this[this.tableSerialSetings.SerialTypeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SerialSetingsRowChangeEvent : EventArgs {
            
            private SerialSetingsRow eventRow;
            
            private DataRowAction eventAction;
            
            public SerialSetingsRowChangeEvent(SerialSetingsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SerialSetingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TagBitDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnStationID;
            
            private DataColumn columnTagID;
            
            private DataColumn columnAddress;
            
            private DataColumn columnBitNumber;
            
            private DataColumn columnName;
            
            internal TagBitDataTable() : 
                    base("TagBit") {
                this.InitClass();
            }
            
            internal TagBitDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn StationIDColumn {
                get {
                    return this.columnStationID;
                }
            }
            
            internal DataColumn TagIDColumn {
                get {
                    return this.columnTagID;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn BitNumberColumn {
                get {
                    return this.columnBitNumber;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public TagBitRow this[int index] {
                get {
                    return ((TagBitRow)(this.Rows[index]));
                }
            }
            
            public event TagBitRowChangeEventHandler TagBitRowChanged;
            
            public event TagBitRowChangeEventHandler TagBitRowChanging;
            
            public event TagBitRowChangeEventHandler TagBitRowDeleted;
            
            public event TagBitRowChangeEventHandler TagBitRowDeleting;
            
            public void AddTagBitRow(TagBitRow row) {
                this.Rows.Add(row);
            }
            
            public TagBitRow AddTagBitRow(System.UInt64 StationID, System.UInt64 TagID, System.UInt64 Address, System.UInt64 BitNumber, string Name) {
                TagBitRow rowTagBitRow = ((TagBitRow)(this.NewRow()));
                rowTagBitRow.ItemArray = new object[] {
                        StationID,
                        TagID,
                        Address,
                        BitNumber,
                        Name};
                this.Rows.Add(rowTagBitRow);
                return rowTagBitRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TagBitDataTable cln = ((TagBitDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TagBitDataTable();
            }
            
            internal void InitVars() {
                this.columnStationID = this.Columns["StationID"];
                this.columnTagID = this.Columns["TagID"];
                this.columnAddress = this.Columns["Address"];
                this.columnBitNumber = this.Columns["BitNumber"];
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnStationID = new DataColumn("StationID", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStationID);
                this.columnTagID = new DataColumn("TagID", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTagID);
                this.columnAddress = new DataColumn("Address", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress);
                this.columnBitNumber = new DataColumn("BitNumber", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBitNumber);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("TagBitNameKey", new DataColumn[] {
                                this.columnName,
                                this.columnStationID,
                                this.columnTagID,
                                this.columnAddress}, false));
                this.columnStationID.AllowDBNull = false;
                this.columnTagID.AllowDBNull = false;
                this.columnAddress.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
            }
            
            public TagBitRow NewTagBitRow() {
                return ((TagBitRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TagBitRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TagBitRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TagBitRowChanged != null)) {
                    this.TagBitRowChanged(this, new TagBitRowChangeEvent(((TagBitRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TagBitRowChanging != null)) {
                    this.TagBitRowChanging(this, new TagBitRowChangeEvent(((TagBitRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TagBitRowDeleted != null)) {
                    this.TagBitRowDeleted(this, new TagBitRowChangeEvent(((TagBitRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TagBitRowDeleting != null)) {
                    this.TagBitRowDeleting(this, new TagBitRowChangeEvent(((TagBitRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTagBitRow(TagBitRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TagBitRow : DataRow {
            
            private TagBitDataTable tableTagBit;
            
            internal TagBitRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTagBit = ((TagBitDataTable)(this.Table));
            }
            
            public System.UInt64 StationID {
                get {
                    return ((System.UInt64)(this[this.tableTagBit.StationIDColumn]));
                }
                set {
                    this[this.tableTagBit.StationIDColumn] = value;
                }
            }
            
            public System.UInt64 TagID {
                get {
                    return ((System.UInt64)(this[this.tableTagBit.TagIDColumn]));
                }
                set {
                    this[this.tableTagBit.TagIDColumn] = value;
                }
            }
            
            public System.UInt64 Address {
                get {
                    return ((System.UInt64)(this[this.tableTagBit.AddressColumn]));
                }
                set {
                    this[this.tableTagBit.AddressColumn] = value;
                }
            }
            
            public System.UInt64 BitNumber {
                get {
                    try {
                        return ((System.UInt64)(this[this.tableTagBit.BitNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagBit.BitNumberColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableTagBit.NameColumn]));
                }
                set {
                    this[this.tableTagBit.NameColumn] = value;
                }
            }
            
            public TagsRow TagsRowParent {
                get {
                    return ((TagsRow)(this.GetParentRow(this.Table.ParentRelations["TagsTagBit"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TagsTagBit"]);
                }
            }
            
            public bool IsBitNumberNull() {
                return this.IsNull(this.tableTagBit.BitNumberColumn);
            }
            
            public void SetBitNumberNull() {
                this[this.tableTagBit.BitNumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TagBitRowChangeEvent : EventArgs {
            
            private TagBitRow eventRow;
            
            private DataRowAction eventAction;
            
            public TagBitRowChangeEvent(TagBitRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TagBitRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
